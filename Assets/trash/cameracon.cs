//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/cameracon.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Cameracon: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Cameracon()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""cameracon"",
    ""maps"": [
        {
            ""name"": ""def"",
            ""id"": ""9372c3cd-ec54-45ac-8e6a-870e6c19329a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5a7b6954-26b8-41e2-9c5a-887222629e29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2dec1b3f-aaad-4e22-8cd6-84483e52e55f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""2f392614-b320-441e-864f-e1b4e1584103"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""a7eab6aa-d20c-492e-919e-a1e5572a5011"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""803e5208-6765-4d1c-a3cf-7ac0244d5c2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClickHold"",
                    ""type"": ""Button"",
                    ""id"": ""413a4a8a-d607-4393-8ca8-55aea7201196"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrigerButton"",
                    ""type"": ""Button"",
                    ""id"": ""e9406b52-009a-4a96-b5a2-6779a52de20b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""68db8979-eede-4ea7-b0db-45723cbe02b7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""da3d402f-1b68-4b24-b6e9-28e1cb403e22"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c8173f31-7409-4d7d-bfaf-4521adb0788d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e175b72b-c9da-44f6-8114-38a55aeb261d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""deeca70a-7bce-4ea6-816f-97532cdc369c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""694ab8d0-6939-4f49-ac19-2887f82f5c63"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5777d98d-83fe-46e8-a27d-9115cab8c58e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b8a1310-767d-4279-8fd7-6666cf732890"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aed6535-1937-4d9d-8603-0385d11e7214"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03abe08a-e057-40bc-952c-60f5ef0a9ccf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClickHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86a59c82-d331-41b9-84b7-ea8e68e93113"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrigerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""mouseK"",
            ""bindingGroup"": ""mouseK"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // def
        m_def = asset.FindActionMap("def", throwIfNotFound: true);
        m_def_Move = m_def.FindAction("Move", throwIfNotFound: true);
        m_def_Look = m_def.FindAction("Look", throwIfNotFound: true);
        m_def_MoveUp = m_def.FindAction("MoveUp", throwIfNotFound: true);
        m_def_MoveDown = m_def.FindAction("MoveDown", throwIfNotFound: true);
        m_def_Boost = m_def.FindAction("Boost", throwIfNotFound: true);
        m_def_RightClickHold = m_def.FindAction("RightClickHold", throwIfNotFound: true);
        m_def_TrigerButton = m_def.FindAction("TrigerButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // def
    private readonly InputActionMap m_def;
    private List<IDefActions> m_DefActionsCallbackInterfaces = new List<IDefActions>();
    private readonly InputAction m_def_Move;
    private readonly InputAction m_def_Look;
    private readonly InputAction m_def_MoveUp;
    private readonly InputAction m_def_MoveDown;
    private readonly InputAction m_def_Boost;
    private readonly InputAction m_def_RightClickHold;
    private readonly InputAction m_def_TrigerButton;
    public struct DefActions
    {
        private @Cameracon m_Wrapper;
        public DefActions(@Cameracon wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_def_Move;
        public InputAction @Look => m_Wrapper.m_def_Look;
        public InputAction @MoveUp => m_Wrapper.m_def_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_def_MoveDown;
        public InputAction @Boost => m_Wrapper.m_def_Boost;
        public InputAction @RightClickHold => m_Wrapper.m_def_RightClickHold;
        public InputAction @TrigerButton => m_Wrapper.m_def_TrigerButton;
        public InputActionMap Get() { return m_Wrapper.m_def; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefActions set) { return set.Get(); }
        public void AddCallbacks(IDefActions instance)
        {
            if (instance == null || m_Wrapper.m_DefActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @RightClickHold.started += instance.OnRightClickHold;
            @RightClickHold.performed += instance.OnRightClickHold;
            @RightClickHold.canceled += instance.OnRightClickHold;
            @TrigerButton.started += instance.OnTrigerButton;
            @TrigerButton.performed += instance.OnTrigerButton;
            @TrigerButton.canceled += instance.OnTrigerButton;
        }

        private void UnregisterCallbacks(IDefActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @RightClickHold.started -= instance.OnRightClickHold;
            @RightClickHold.performed -= instance.OnRightClickHold;
            @RightClickHold.canceled -= instance.OnRightClickHold;
            @TrigerButton.started -= instance.OnTrigerButton;
            @TrigerButton.performed -= instance.OnTrigerButton;
            @TrigerButton.canceled -= instance.OnTrigerButton;
        }

        public void RemoveCallbacks(IDefActions instance)
        {
            if (m_Wrapper.m_DefActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefActions instance)
        {
            foreach (var item in m_Wrapper.m_DefActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefActions @def => new DefActions(this);
    private int m_mouseKSchemeIndex = -1;
    public InputControlScheme mouseKScheme
    {
        get
        {
            if (m_mouseKSchemeIndex == -1) m_mouseKSchemeIndex = asset.FindControlSchemeIndex("mouseK");
            return asset.controlSchemes[m_mouseKSchemeIndex];
        }
    }
    public interface IDefActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnRightClickHold(InputAction.CallbackContext context);
        void OnTrigerButton(InputAction.CallbackContext context);
    }
}
